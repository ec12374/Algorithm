/*
	 * https://leetcode.com/problems/binary-gap/
         * 868. Binary Gap
	 * 
	 * Given a positive integer N, find and return the longest distance between
	 * two consecutive 1's in the binary representation of N.
	 * 
	 * If there aren't two consecutive 1's, return 0.
	 * 
	 * 
	 * 
	 * Input: 22 
           Output: 2 
           Explanation: 22 in binary is 0b10110. In the binary representation of 22, there are three ones, and two consecutive pairs of 1's. 
            The first consecutive pair of 1's have distance 2. The second
	 * consecutive pair of 1's have distance 1. The answer is the largest of
	 * these two distances, which is 2.
	 */

	public int binaryGap(int N) {

		int count = 0, last = -1;
		int maxCount = 0;
		while (N != 0) {
			count++;
			if ((N % 2) == 1) {

				if (last != -1) 
					maxCount = Math.max(maxCount, count - last);

				last = count;

			}
			N = N / 2;
		}
		return maxCount;
	}

	// Using bit shift
	public int binaryGap1(int N) {
		int maxCount = 0, last = -1;
		int pos = 0;
		while (N != 0) {
			pos++;
			if ((N & 1) == 1) {
				if (last != -1)
					maxCount = Math.max(maxCount, pos - last);
				last = pos;
			}
			N >>= 1;
		}
		return maxCount;
	}

	public static void main(String[] args) {

		BinaryGap bg = new BinaryGap();
		System.out.println("Largest gap between 1's is " + bg.binaryGap(9));

	}
