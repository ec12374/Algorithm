package com.tus.DynamicProgramming;


/*
Maximum sum such that no two elements are adjacent
Input : arr[] = {5, 5, 10, 100, 10, 5}
Output : 110

Input : arr[] = {1, 2, 3}
Output : 4

Input : arr[] = {1, 20, 3}
Output : 20

Input : arr[] = {-2, 4, 6, -5, 10}
Output : 16
*/

public class MaxSumNoTwoAdjacent {

	// Using Recursion
	// TC: O(2^n)
	// SC: O(log n)
	public static int findMaxSum1(int[] in) {
		if (in == null || in.length == 0)
			return 0;
		if (in.length == 1)
			return in[0];
		return auxMaxSum1(in.length - 1, in);
	}

	private static int auxMaxSum1(int i, int[] in) {
		if (i < 0)
			return 0;
		int inclSum = auxMaxSum1(i - 2, in) + in[i];
		int exclSum = auxMaxSum1(i - 1, in);
		System.out.println(inclSum + ", " + exclSum);
		return Math.max(inclSum, exclSum);
	}

	// Using Recursion + memory
	// Memoization
	// TC: O(n)
	// SC: O(n)
	public static int findMaxSum2(int[] in) {
		if (in == null || in.length == 0)
			return 0;
		if (in.length == 1)
			return in[0];
		int[] memory = new int[in.length];
		return auxMaxSum2(in.length - 1, in,memory);
	}

	private static int auxMaxSum2(int i, int[] in, int[] memory) {
		if (i < 0)
			return 0;
		if(memory[i]!=0)return memory[i];
		int inclSum = auxMaxSum2(i - 2, in, memory) + in[i];
		int exclSum = auxMaxSum2(i - 1, in, memory);

		memory[i] = Math.max(inclSum, exclSum);
		return memory[i];
	}

	// Dynamic Programming
	// TC: O(n)
	// SC: O(n)
	
	public static int findMaxSum(int[] arr){
		if (arr == null || arr.length == 0)
			return 0;
		if (arr.length == 1)
			return arr[0];
		int[] memory = new int[arr.length+1];
		
	    memory[0]=0;
	    memory[1] = Math.max(0, arr[0]);
		
		for(int i=2;i<=arr.length;++i){
		
		    int inclSum = arr[i-1] +memory[i-2];
		    int exclSum = memory[i-1];
		
		    memory[i] =Math.max(inclSum, exclSum);
		}
		
		//System.out.println(Arrays.toString(memory));
		return memory[memory.length-1];
		
	}
	    // Dynamic Programming more optimized in terms of memory
		// TC: O(n)
		// SC: O(1)
		
	
	public static int findMaxSum4(int[] arr){
		if (arr == null || arr.length == 0)
			return 0;
		if (arr.length == 1)
			return arr[0];
		
		int mem1= 0;
		int mem2= Math.max(0,arr[0]);
	   	
		for(int i=2;i<=arr.length;++i){
		
		    int inclSum = arr[i-1] + mem1;
		    int exclSum = mem2;
		    
		    mem1=mem2;
		    mem2 =Math.max(inclSum, exclSum);
		}
		
		//System.out.println(Arrays.toString(memory));
		return mem2;
		
	}
	
	public static void main(String[] args) {

		int[] arr = { -2, 4, 6, -5, 10 };
		int[] arr1 = { 5, 5, 10, 100, 10, 5 };
		int[] arr2 = { -2 };
		int[] arr3 = {};

		System.out.println(MaxSumNoTwoAdjacent.findMaxSum4(arr3));

	}

}
